'use strict';

/** Monthly coefficient since Feb. 1873 and later. */
const record = [
    4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 4,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 5, 5, 5, 6, 7, 8, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 5, 5, 5, 6, 7, 8, 8, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 8,
    6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 8, 8, 8, 9, 9, 8, 8,
    6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 7, 6, 6, 7, 8, 9, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 5, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 8, 9, 8, 8,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 5, 6, 7, 8, 8, 8, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 7, 6, 7, 6, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7,
    6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 7, 6, 6, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 6, 8, 8, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 9, 9, 9, 8, 8,
    7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 7, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    7, 5, 8, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8,
    6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 8, 9, 8, 8,
    6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 6, 6, 7, 8, 8, 8, 9, 8, 8,
    6, 5, 5, 5, 5, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 8,
    6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    5, 4, 5, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 5, 5, 6, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7,
    6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    5, 4, 6, 5, 5, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7,
    6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 5, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7,
    6, 5, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 7,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7,
    6, 4, 5, 4, 5, 5, 6, 7, 7, 7, 7, 6,
    5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
    5, 4, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7,
];

const { LocalDate } = require('js-joda');

/**
 * Iterator function for generating monthly coefficient and
 * year / month information pair.
 */
function* iter() {
    let date = LocalDate.parse('1873-01-01');
    for (let dcof of record) {
        date = date.plusMonths(1);
        yield { month: date.monthValue(), year: date.year(), dcof };
    }
}

/**
 * Pairs of _year / month_ information and _monthly coefficient_.
 * 
 * Since it can be supposed that often specified on dates
 * after the late 20th century, the list is reversed order
 * for performance improvement.
 */
const table = [...iter()].reverse();

/**
 * Search monthly coefficient corresponding to the specified date.
 *
 * Returns an `undefined` when it did not exist.
 * 
 * @param {LocalDate} date Date information.
 * 
 * Ignoring that information other than year / month.
 * @returns {number} Monthly coefficient.
 */
module.exports =
    (date = LocalDate.now()) => {
        const y = date.year();
        const m = date.monthValue();
        const result =
            table.find(({ month, year }) => month === m && year === y);
        return result ? result.dcof : undefined;
    };