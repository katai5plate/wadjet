const constants = {
  coefMonthlyRecord: {
    1873: [null, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7],
    1874: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 4],
    1875: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8],
    1876: [6, 5, 5, 5, 5, 6, 7, 8, 7, 8, 7, 7],
    1877: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7],
    1878: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1879: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8],
    1880: [6, 5, 5, 5, 5, 6, 7, 8, 8, 8, 7, 7],
    1881: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7],
    1882: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1883: [6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 8],
    1884: [6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    1885: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1886: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1887: [6, 4, 6, 5, 6, 8, 8, 8, 9, 9, 8, 8],
    1888: [6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7],
    1889: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1890: [6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 7],
    1891: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8],
    1892: [6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7],
    1893: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1894: [6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 7],
    1895: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8],
    1896: [6, 5, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    1897: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1898: [6, 4, 6, 5, 6, 6, 7, 8, 8, 9, 8, 7],
    1899: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8],
    1900: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 8],
    1901: [6, 5, 7, 6, 6, 7, 8, 9, 9, 9, 8, 8],
    1902: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1903: [7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8],
    1904: [7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1905: [6, 5, 6, 5, 6, 7, 8, 8, 9, 9, 8, 8],
    1906: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1907: [7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8],
    1908: [7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1909: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1910: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1911: [7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8],
    1912: [7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1913: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1914: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1915: [7, 5, 7, 6, 7, 7, 9, 9, 9, 9, 8, 8],
    1916: [7, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1917: [6, 5, 6, 6, 6, 7, 8, 8, 8, 9, 8, 8],
    1918: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1919: [7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1920: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1921: [6, 5, 6, 5, 6, 7, 8, 8, 8, 9, 8, 8],
    1922: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1923: [7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1924: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1925: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7],
    1926: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1927: [7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1928: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1929: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7],
    1930: [6, 5, 7, 6, 7, 6, 8, 9, 9, 9, 8, 8],
    1931: [7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1932: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7],
    1933: [6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1934: [6, 5, 7, 6, 6, 7, 8, 9, 9, 9, 8, 8],
    1935: [7, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1936: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7],
    1937: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1938: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1939: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1940: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7],
    1941: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1942: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1943: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1944: [7, 5, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7],
    1945: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1946: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1947: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1948: [7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1949: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1950: [6, 5, 6, 6, 6, 7, 6, 8, 8, 9, 8, 8],
    1951: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1952: [7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1953: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1954: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 8],
    1955: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1956: [7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1957: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1958: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7],
    1959: [6, 5, 7, 6, 7, 7, 8, 9, 9, 9, 8, 8],
    1960: [7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1961: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1962: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7],
    1963: [6, 5, 6, 6, 6, 7, 8, 9, 9, 9, 8, 8],
    1964: [7, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1965: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1966: [6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1967: [6, 5, 7, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1968: [7, 5, 8, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1969: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1970: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1971: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1972: [6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1973: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7],
    1974: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1975: [6, 5, 6, 6, 6, 7, 8, 8, 9, 9, 8, 8],
    1976: [6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1977: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1978: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1979: [6, 5, 6, 6, 6, 7, 8, 8, 8, 9, 8, 8],
    1980: [6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1981: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1982: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    1983: [6, 5, 6, 6, 6, 7, 8, 8, 8, 9, 8, 8],
    1984: [6, 5, 5, 5, 5, 6, 7, 8, 8, 8, 7, 7],
    1985: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1986: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1987: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 8],
    1988: [6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1989: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1990: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1991: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7],
    1992: [6, 5, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1993: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1994: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1995: [6, 5, 6, 6, 6, 6, 8, 8, 8, 9, 8, 7],
    1996: [6, 5, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    1997: [5, 4, 5, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    1998: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    1999: [6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    2000: [6, 5, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    2001: [6, 4, 5, 5, 6, 6, 7, 7, 8, 8, 7, 7],
    2002: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 7, 7],
    2003: [6, 5, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    2004: [6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    2005: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2006: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2007: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    2008: [6, 5, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    2009: [5, 4, 6, 5, 5, 6, 7, 8, 8, 8, 7, 7],
    2010: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2011: [6, 4, 6, 5, 6, 6, 8, 8, 8, 9, 8, 7],
    2012: [6, 5, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7],
    2013: [5, 4, 6, 5, 5, 6, 7, 8, 8, 8, 7, 7],
    2014: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2015: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    2016: [6, 5, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    2017: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2018: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2019: [6, 4, 6, 5, 6, 6, 8, 8, 8, 8, 8, 7],
    2020: [6, 5, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    2021: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2022: [5, 4, 5, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    2023: [6, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7],
    2024: [6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 7],
    2025: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2026: [5, 4, 5, 5, 5, 6, 7, 7, 7, 8, 7, 7],
    2027: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7],
    2028: [6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6],
    2029: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2030: [5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    2031: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 8, 7],
    2032: [6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6],
    2033: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2034: [5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    2035: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2036: [6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6],
    2037: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2038: [5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    2039: [5, 4, 6, 5, 6, 6, 7, 8, 8, 8, 7, 7],
    2040: [6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6],
    2041: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2042: [5, 4, 5, 5, 5, 5, 7, 7, 7, 8, 7, 7],
    2043: [5, 4, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    2044: [6, 4, 5, 4, 5, 5, 6, 7, 7, 8, 7, 6],
    2045: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2046: [5, 4, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2047: [5, 4, 6, 5, 5, 6, 7, 7, 8, 8, 7, 7],
    2048: [6, 4, 5, 4, 5, 5, 6, 7, 7, 7, 7, 6],
    2049: [5, 3, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
    2050: [5, 4, 5, 4, 5, 5, 7, 7, 7, 8, 7, 7],
  },
  coefNatures: [
    [2, 8, 3, 7, 10, 4, 0, 9, 1, 5, 11, 6],
    [3, 8, 2, 6, 11, 5, 1, 9, 0, 4, 10, 7],
    [5, 11, 6, 2, 8, 3, 7, 10, 4, 0, 9, 1],
    [4, 10, 7, 3, 8, 2, 6, 11, 5, 1, 9, 0],
    [0, 9, 1, 5, 11, 6, 2, 8, 3, 7, 10, 4],
    [4, 10, 7, 3, 8, 2, 6, 11, 5, 1, 9, 0],
    [0, 9, 1, 5, 11, 6, 2, 8, 3, 7, 10, 4],
    [1, 9, 0, 4, 10, 7, 3, 8, 2, 6, 11, 5],
    [7, 10, 4, 0, 9, 1, 5, 11, 6, 2, 8, 3],
    [6, 11, 5, 1, 9, 0, 4, 10, 7, 3, 8, 2],
  ],
  coefPotentials: [
    [2, 3, 4, 5, 8, 9, 0, 1, 6, 7],
    [7, 6, 3, 2, 5, 4, 9, 8, 1, 0],
    [6, 7, 2, 3, 4, 5, 8, 9, 0, 1],
    [1, 0, 7, 6, 3, 2, 5, 4, 9, 8],
    [0, 1, 6, 7, 2, 3, 4, 5, 8, 9],
    [9, 8, 1, 0, 7, 6, 3, 2, 5, 4],
    [8, 9, 0, 1, 6, 7, 2, 3, 4, 5],
    [5, 4, 9, 8, 1, 0, 7, 6, 3, 2],
    [4, 5, 8, 9, 0, 1, 6, 7, 2, 3],
    [3, 2, 5, 4, 9, 8, 1, 0, 7, 6],
  ],
  lifeBaseIndexes: [
    [2, 3, 5, 4, 6, 1, 7, 0, 8, 9],
    [9, 8, 3, 2, 4, 5, 1, 6, 0, 7],
    [8, 9, 2, 3, 5, 4, 6, 1, 7, 0],
    [0, 7, 9, 8, 3, 2, 4, 5, 1, 6],
    [7, 0, 8, 9, 2, 3, 5, 4, 6, 1],
    [1, 6, 0, 7, 9, 8, 3, 2, 4, 5],
    [6, 1, 7, 0, 8, 9, 2, 3, 5, 4],
    [4, 5, 1, 6, 0, 7, 9, 8, 3, 2],
    [5, 4, 6, 1, 7, 0, 8, 9, 2, 3],
    [3, 2, 4, 5, 1, 6, 0, 7, 9, 8],
  ],
  lifeBaseCoefTable: [
    [
      { t: 9, v: 10 },
      { t: 13, v: 8 },
      { t: null, v: 6 },
    ],
    [
      { t: 3, v: 6 },
      { t: 5, v: 5 },
      { t: 14, v: 3 },
      { t: null, v: 1 },
    ],
    [
      { t: 10, v: 1 },
      { t: null, v: 2 },
    ],
    [
      { t: 9, v: 2 },
      { t: 13, v: 10 },
      { t: null, v: 5 },
    ],
    [
      { t: 5, v: 5 },
      { t: 14, v: 7 },
      { t: null, v: 3 },
    ],
    [
      { t: 10, v: 3 },
      { t: null, v: 4 },
    ],
    [
      { t: 9, v: 4 },
      { t: 13, v: 2 },
      { t: null, v: 6 },
    ],
    [
      { t: 3, v: 6 },
      { t: 5, v: 5 },
      { t: 14, v: 9 },
      { t: null, v: 7 },
    ],
    [
      { t: 10, v: 7 },
      { t: null, v: 8 },
    ],
    [
      { t: 9, v: 8 },
      { t: 13, v: 4 },
      { t: null, v: 5 },
    ],
    [
      { t: 5, v: 5 },
      { t: 14, v: 1 },
      { t: null, v: 9 },
    ],
    [
      { t: 10, v: 9 },
      { t: null, v: 10 },
    ],
  ],
  natureBusinessMap: [
    [1, 2, 1, 1, 2, 2, 0, 2, 3, 0, 3, 2],
    [3, 1, 3, 1, 2, 1, 3, 1, 3, 2, 1, 0],
    [2, 0, 2, 2, 0, 3, 3, 0, 0, 3, 0, 0],
    [0, 1, 2, 2, 1, 1, 0, 0, 3, 1, 2, 0],
    [1, 0, 2, 2, 3, 0, 1, 1, 2, 2, 1, 3],
    [0, 2, 2, 0, 2, 3, 2, 2, 0, 1, 1, 2],
    [1, 3, 3, 0, 1, 1, 3, 0, 0, 1, 0, 2],
    [2, 0, 0, 3, 2, 2, 2, 0, 1, 0, 3, 3],
    [0, 2, 2, 0, 0, 0, 3, 2, 3, 1, 2, 1],
    [0, 3, 0, 0, 2, 0, 1, 0, 2, 3, 2, 0],
    [0, 0, 0, 2, 0, 0, 0, 3, 1, 3, 2, 1],
    [3, 0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0],
  ],
  natureRomanceMap: [
    [3, 2, 1, 2, 1, 1, 0, 0, 0, 2, 1, 3],
    [2, 0, 3, 3, 1, 0, 1, 1, 3, 1, 1, 0],
    [2, 2, 2, 1, 3, 3, 3, 2, 3, 0, 0, 1],
    [1, 3, 1, 0, 0, 0, 0, 1, 0, 0, 3, 2],
    [0, 1, 0, 3, 0, 3, 1, 2, 1, 3, 0, 3],
    [3, 3, 0, 0, 2, 2, 3, 0, 1, 2, 3, 1],
    [1, 0, 3, 2, 0, 2, 2, 0, 2, 3, 1, 3],
    [2, 0, 0, 1, 1, 2, 0, 3, 3, 1, 2, 1],
    [2, 2, 3, 0, 2, 0, 0, 3, 2, 2, 2, 0],
    [0, 3, 0, 0, 3, 0, 2, 0, 0, 2, 2, 3],
    [0, 0, 3, 3, 1, 0, 0, 0, 0, 3, 3, 2],
    [1, 1, 1, 1, 2, 3, 3, 1, 0, 0, 1, 2],
  ],
  natureDetailMap: [
    [1, 1, 1, 1, 5, 1],
    [1, 0, 0, 0, 2, 1],
    [1, 0, 1, 2, 5, 0],
    [1, 1, 0, 3, 2, 0],
    [0, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 1],
    [0, 0, 1, 2, 1, 0],
    [0, 1, 0, 3, 0, 0],
    [0, 1, 0, 3, 4, 0],
    [0, 0, 0, 0, 4, 1],
    [1, 1, 1, 1, 3, 1],
    [1, 0, 1, 2, 3, 0],
  ],
  potentialNames: ['Ci', 'Co', 'Ei', 'Eo', 'Fi', 'Fo', 'Ii', 'Io', 'Ni', 'No'],
  lifeBaseNames: [
    'Application',
    'Association',
    'Development',
    'Expression',
    'Finance',
    'Investment',
    'Organization',
    'Quest',
    'SelfMind',
    'SelfReliance',
  ],
  natureNames: {
    arts: {
      prefix: 'A',
      type: ['000', '024', '100', '888'],
    },
    education: {
      prefix: 'E',
      type: ['001', '125', '555', '919'],
    },
    humanities: {
      prefix: 'H',
      type: ['012', '025', '108', '789'],
    },
  },
  communicationNames: ['Fix', 'Flex'],
  managementNames: ['Care', 'Hope'],
  responseNames: ['Action', 'Mind'],
  positionNames: ['Adjust', 'Brain', 'Direct', 'Quick'],
  motivationNames: [
    'Competition',
    'OwnMind',
    'Power',
    'Safety',
    'SkillUp',
    'Status',
  ],
  brainNames: ['Left', 'Right'],
};
const NatureNameList = (() => {
  const { natureNames } = constants;
  const {
    arts: { prefix: A, type: typeA },
    education: { prefix: E, type: typeE },
    humanities: { prefix: H, type: typeH },
  } = natureNames;
  return [
    ...typeA.map((t) => `${A}${t}`),
    ...typeE.map((t) => `${E}${t}`),
    ...typeH.map((t) => `${H}${t}`),
  ];
})();
const createComparator = (() => {
  const { natureNames } = constants;
  const { arts, education, humanities } = natureNames;
  const [A, E, H] = [arts, education, humanities].map((x) => x.prefix);
  const cmpA = (a, b) =>
    (a === E && b === A) || (a === A && b === H) || (a === E && b === H)
      ? 1
      : -1;
  const cmpE = (a, b) =>
    (a === H && b === E) || (a === E && b === A) || (a === H && b === A)
      ? 1
      : -1;
  const cmpH = (a, b) =>
    (a === A && b === H) || (a === H && b === E) || (a === A && b === E)
      ? 1
      : -1;
  const cmp = { A: cmpA, E: cmpE, H: cmpH };
  return (type) => (a, b) =>
    ((x, y, t, p) =>
      x === y || p.test(x) || p.test(y) || p.test(t) ? 0 : cmp[t](x, y))(
      a.charAt().toUpperCase(),
      b.charAt().toUpperCase(),
      type.charAt().toUpperCase(),
      new RegExp(`[^${A}${E}${H}]`),
    );
})();
const detail = (() => {
  const {
    natureNames,
    natureBusinessMap,
    natureRomanceMap,
    natureDetailMap,
    communicationNames,
    managementNames,
    responseNames,
    positionNames,
    motivationNames,
    brainNames,
  } = constants;
  const {
    arts: { prefix: A, type: typeA },
    education: { prefix: E, type: typeE },
    humanities: { prefix: H, type: typeH },
  } = natureNames;
  const nature = [
    ...typeA.map((t) => `${A}${t}`),
    ...typeE.map((t) => `${E}${t}`),
    ...typeH.map((t) => `${H}${t}`),
  ];
  const natureMap = (table) =>
    table
      .map((r, ri) => ({
        [NatureNameList[ri]]: r
          .map((v, vi) => ({ [NatureNameList[vi]]: v }))
          .reduce((p, c) => ({ ...p, ...c }), {}),
      }))
      .reduce((p, c) => ({ ...p, ...c }), {});
  const business = natureMap(natureBusinessMap);
  const romance = natureMap(natureRomanceMap);
  const generate = (...row) => ({
    communication: communicationNames[row[0]] || '',
    management: managementNames[row[1]] || '',
    response: responseNames[row[2]] || '',
    position: positionNames[row[3]] || '',
    motivation: motivationNames[row[4]] || '',
    brain: brainNames[row[5]] || '',
    romance: romance[nature[row[6]]] || {},
    business: business[nature[row[6]]] || {},
  });
  const unknown = generate(-1, -1, -1, -1, -1, -1);
  const map = new Map(
    natureDetailMap.map((value, index) => [
      nature[index],
      generate(...value, index),
    ]),
  );
  return (key) => ({ ...(map.get(key) || unknown) });
})();
const personality = (() => {
  const {
    coefMonthlyRecord,
    lifeBaseNames,
    lifeBaseIndexes,
    lifeBaseCoefTable,
    coefNatures,
    coefPotentials,
    potentialNames,
  } = constants;
  const coefMonthly = (date) =>
    coefMonthlyRecord[date.getFullYear()][date.getMonth()];
  const tableXY = (label, table) => ({ x = 0, y = 0 } = {}) =>
    ((z) => z || '')(label[((r) => (r ? r[x] : undefined))(table[y])]);
  const lifeBase = tableXY(lifeBaseNames, lifeBaseIndexes);
  const MAX = Number.MAX_VALUE;
  const table = lifeBaseCoefTable;
  const lifeBaseCoef = (month, dcoef) =>
    ((r, d) =>
      !r ? Number.NaN : r.find((v) => d < (v.t === null ? MAX : v.t)).v)(
      table[month - 1],
      dcoef,
    );
  const natures = tableXY(NatureNameList, coefNatures);
  const potential = tableXY(potentialNames, coefPotentials);
  const ymd = (birth) => {
    const ld = typeof birth === 'string' ? new Date(birth) : birth;
    const dcoef = coefMonthly(ld);
    if (Number.isNaN(dcoef)) {
      throw new Error();
    }
    return {
      year: Math.floor(ld.getFullYear()),
      month: Math.floor(ld.getMonth() + 1),
      date: Math.floor(ld.getDate()),
      dcoef,
    };
  };
  const naturePotential = (cycle) => {
    const code = (func, limit) => (v) =>
      func({ x: (v % limit || limit) - 1, y: cycle });
    return { mn: code(natures, 12), mp: code(potential, 10) };
  };
  return (birth) => {
    const { year, month, date, dcoef } = ymd(birth);
    const yh = Math.floor(year * 0.01);
    const early = Math.floor(month <= 2);
    const icoef = month + early * 12;
    const inner = [
      5.25 * ((year % 100) - early),
      0.6 * (icoef + 1),
      4.25 * yh,
    ].reduce((p, c) => p + Math.floor(c), date + 1);
    const ge = date >= dcoef;
    const outer = (month - Math.floor(!ge) || 12) + 1;
    const ymb = year - (month === 2 && ge ? early : 0);
    const lbc = lifeBaseCoef(month, date - dcoef) - 1;
    const cycle = (inner + 6) % 10;
    const { mn, mp } = naturePotential(cycle);
    return {
      inner: mn(inner + yh * 4 + icoef * 6),
      outer: mn(outer),
      cycle: cycle || 10,
      lifeBase: lifeBase({ x: lbc, y: cycle }),
      potential: `${mp(ymb + 7)}-${mp(year * 2 + outer + 2)}`,
      workstyle: mn(ymb + 9),
    };
  };
})();
const bizTeam = (business, personalType, position) => {
  const map = Object.entries(business).map(([type, pri]) => ({
    type,
    pri,
    pos: detail(type).position,
  }));
  const comparator = createComparator(personalType);
  map.sort(({ pri: pa, type: ta }, { pri: pb, type: tb }) =>
    pa !== pb ? -(pa - pb) : comparator(ta, tb),
  );
  const result = map.reduce(
    (p, { pos, type }) =>
      pos === position || pos in p ? p : { ...p, [pos]: type },
    {},
  );
  return result;
};
const mod = (date) => {
  const p = personality(date);
  const i = detail(p.inner);
  const t = bizTeam(i.business, p.inner, i.position);
  return { personal: p, inner: i, team: t };
};
try {
  module.exports = mod;
} catch (e) {
  window.wadjet = mod;
}
